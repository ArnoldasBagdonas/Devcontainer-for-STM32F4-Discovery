# This Dockerfile creates an Alpine Linux-based image with various software development tools installed.

# Use the latest Alpine Linux image as the base image.
FROM alpine:latest

# Update the package index.
RUN apk update

# Install git for distributed version control system for source code management and collaboration.
RUN apk add --no-cache git

# Install make for build automation tool used to build and manage complex software projects.
RUN apk add --no-cache make

# Install gcc for compiler for the C programming language.
RUN apk add --no-cache gcc

# Install g++ for compiler for the C++ programming language.
RUN apk add --no-cache g++

# Install libc-dev for development libraries and header files for the C library, used for building and linking programs.
RUN apk add --no-cache libc-dev

# Install libstdc++ for C++ standard library implementation.
RUN apk add --no-cache libstdc++

# Install linux-headers for header files required for building kernel modules and other system software.
RUN apk add --no-cache linux-headers

# Install bash for popular shell and command language used for scripting and interactive command-line usage.
RUN apk add --no-cache bash

# Install cmake for cross-platform build system generator used to build, test, and package software.
RUN apk add --no-cache cmake

# Install file utility used to determine the file type of a file.
RUN apk add --no-cache file

# Install gdb debugger for C, C++, and other programming languages.
RUN apk add --no-cache gdb

# Install openocd tool used to debug and program microcontrollers.
RUN apk add --no-cache openocd

# Install python3 for Python programming language version 3.x.
RUN apk add --no-cache python3

# Install python3-pip for Python package installer, used to install and manage Python packages.
RUN apk add --no-cache py3-pip

# Install ninja for fast build system similar to Make, used to build and test software.
RUN apk add --no-cache ninja

# Install gcc-arm-none-eabi toolchain for ARM Cortex-M and Cortex-R processors, used to develop embedded systems.
RUN apk add --no-cache gcc-arm-none-eabi

# Install the pyelftools Python library using pip.
RUN pip install pyelftools


# make -e CFLAGS="-I /usr/include"
